from qiskit import transpile, assemble
from qiskit import QuantumCircuit
from qiskit import execute, Aer, IBMQ, QuantumRegister, ClassicalRegister
from qiskit.visualization import plot_histogram,plot_bloch_vector
from qiskit.providers.aer import QasmSimulator
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from ibm_quantum_widgets import *
import math
simulator = QasmSimulator()

#crear matriz unitaria:
U =       [[0, 0, 0, 1],
          [0, 0, 1, 0],
          [1, 0, 0, 0],
          [0, 1, 0, 0]]

qc = QuantumCircuit(2)

#crear unitary gate a partir de matriz unitaria:
qc.unitary(U, [0,1])
qc.draw()

#descomponer unitaria
trans_qc = transpile (qc, basis_gates=['cx','u3'])
trans_qc.draw()

#Nielsen and Chuang, QUANTUM COMPUTATION AND QUANTUM INFORMATION. 1ST SET: HADAMARD + PHASE + CNOT + PI/8
trans_qc.h(1)
trans_qc.draw()

trans_qc.s(1)
trans_qc.draw()

trans_qc.cx(0,1)
trans_qc.draw()

trans_qc.t(1)
trans_qc.draw()

#measure
trans_qc.measure([0,1], [0,1])
trans_qc.draw()


#counts e histograma
job = simulator.run(trans_qc, shots=100000)
result = job.result()
counts = result.get_counts(trans_qc)
print (counts)
plot_histogram(counts)


