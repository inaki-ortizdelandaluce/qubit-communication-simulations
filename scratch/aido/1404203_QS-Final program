from qiskit import transpile, assemble
from qiskit import execute, Aer, IBMQ, QuantumRegister, ClassicalRegister
from qiskit.visualization import plot_histogram
from qiskit import QuantumCircuit
from qiskit.extensions import UnitaryGate
from qiskit.providers.aer import QasmSimulator
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from ibm_quantum_widgets import *
import math
simulator = QasmSimulator()

qc = QuantumCircuit(2,2)

psi=((3+1.j*math.sqrt(3))/4.,-0.5)

U =  [[ 0.70710678+0.j, 0.+0.j, 0.70710678+0.j, 0.+0.j],
 [ 0.+0.j, 0.70710678+0.j, 0. +0.j, 0.70710678+0.j],
 [ 0.5-0.j, 0.5+0.j, -0.5+0.j, -0.5+0.j],
 [-0.5+0.j, 0.5+0.j, 0.5+0.j, -0.5+0.j]]
 
qc.initialize (psi,0)
qc.unitary(U,[0,1])
qc.measure([0,1],[0,1])
qc.draw()

backend = Aer.get_backend('aer_simulator')
qc_transpiled = transpile (qc, backend)
qc_transpiled.draw()

job = backend.run(qc_transpiled, shots=4000)
result = job.result()
counts = result.get_counts(qc_transpiled)

print(counts)
plot_histogram (counts)

sum(counts.values())
print(counts ['00'] / sum(counts.values()))
print(counts ['01'] / sum(counts.values()))
print(counts ['10'] / sum(counts.values()))
print(counts ['11'] / sum(counts.values()))
