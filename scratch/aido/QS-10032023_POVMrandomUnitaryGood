from qiskit import transpile, assemble
from qiskit import execute, Aer, IBMQ, QuantumRegister, ClassicalRegister
from qiskit.visualization import plot_histogram
from qiskit import QuantumCircuit
from qiskit.extensions import UnitaryGate
from qiskit.quantum_info import random_unitary
from qiskit.providers.aer import QasmSimulator
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from ibm_quantum_widgets import *
import math
simulator = QasmSimulator()

qc = QuantumCircuit(2,2)

randUnitary = UnitaryGate(random_unitary(4), label='Unitary to descompose')
qc.append(randUnitary, [0,1])
qc.draw()

trans_qc = transpile (qc, basis_gates=['cx','u3'])
trans_qc.draw()

trans_qc.h(1)
trans_qc.draw()

trans_qc.s(1)
trans_qc.draw()

trans_qc.cx(0,1)
trans_qc.draw()

trans_qc.t(1)
trans_qc.draw()

trans_qc.measure([0,1],[0,1])
trans_qc.draw()
#no cambia el resultado si medimos alice y bob, o solo bob
# modelo no funciona si solo tenemos medición en un bit clasico, mínimo 2

job = simulator.run(trans_qc, shots=100000)
result = job.result()
counts = result.get_counts(trans_qc)

print(counts)
plot_histogram(counts)
